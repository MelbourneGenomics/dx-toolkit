#!/home/geet/dx-toolkit/build/py_env/bin/python

"""dx-docker Run Docker images in your DNAnexus app."""

import argparse
import sys
import os
import subprocess
import pprint
import json
import multiprocessing.dummy
import tempfile
import glob

CACHE_DIR = '/dx-docker-cache'

def shell(cmd, ignore_error=False):
    #print cmd
    try:
        subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        if ignore_error:
            return
        else:
            sys.exit(e.returncode)

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()

def image_name_from_path(image_path):
    imagename = image_path.replace("/","-").replace(":", "-")
    return imagename.replace("quay.io-", "")

def get_aci_name(imagename):
    matching_files = glob.glob("{cachedir}/*{image}*.aci".format(cachedir=CACHE_DIR, image=imagename))
    if len(matching_files) == 0:
        return None
    elif len(matching_files) == 1: 
        return matching_files[0]
    else:
        raise Exception("dx-docker cache error: Exactly one aci archive should correspond to an image name: {} found archives".format(len(matching_files)))


def extract_aci(image):
    imagename = image_name_from_path(image)
    aciname = get_aci_name(imagename)
    tmpdir = tempfile.mkdtemp()
    shell(["tar", "-xzf", aciname, "--exclude", "rootfs/dev/*", "-C", tmpdir], ignore_error=True)
    return tmpdir

parser_pull = subparsers.add_parser('pull', help="Pulls a docker image for use in DNAnexus")
parser_pull.add_argument("image", help="image name")
def pull(args):
    if not os.path.isdir(CACHE_DIR):
        shell(["mkdir", CACHE_DIR])
    os.chdir(CACHE_DIR)
    shell(["docker2aci", "docker://{image}".format(image=args.image)])
parser_pull.set_defaults(func=pull)

parser_run = subparsers.add_parser('run', help="Runs a docker image in a container")
parser_run.add_argument("-v", "--volume", help="Directory to mount inside the container. Can be supplied multiple times (e.g. -v /mnt/data:/mnt/data -v /host:/guest", action='append', default=[])
parser_run.add_argument("--entrypoint",  help="Overwrite default entry point for image")
parser_run.add_argument("-w", "--workdir",  help="Working directory", default="/")
parser_run.add_argument("image", help="image name")
parser_run.add_argument("command", help="command to run within container", nargs=argparse.REMAINDER, default=[])
def run(args):
    imagename = image_name_from_path(args.image)
    aciname = get_aci_name(imagename)
    if not aciname:
        pull(parser_pull.parse_args([args.image]))

    tmpdir = extract_aci(args.image)

    with open("{tmpdir}/manifest".format(tmpdir=tmpdir, image=imagename)) as f:
        imagemeta = json.loads(f.read())
    annotations = {a['name'].split("/")[-1]: a['value'] for a in imagemeta['annotations']}
    vols = ["/run/shm/:/dev/shm"] + args.volume
    volume = []
    for v in vols:
       volume.append("-b")
       volume.append(v)


    entrypoint = []
    if args.entrypoint:
        entrypoint = [args.entrypoint]
    elif 'entrypoint' in annotations:
        entrypoint = json.loads(annotations['entrypoint'])

    cmd = []
    if args.command:
         cmd = args.command
    elif 'cmd' in annotations and not args.entrypoint:
         cmd = json.loads(annotations['cmd'])

    if not ('cmd' in annotations and 'entrypoint' in annotations):
        container_cmd = imagemeta['app']['exec'] + cmd
    else:
        container_cmd = entrypoint + cmd
        

    workdir = args.workdir
    if 'workingDirectory' in imagemeta['app']:
       workdir = imagemeta['app']['workingDirectory']

    env = ["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"]
    if 'environment' in imagemeta['app']:
        env += [var['name']+"="+var['value']  for var in imagemeta['app']['environment']]

    proot_cmd =  ["proot", "-R", "{tmpdir}/rootfs".format(tmpdir=tmpdir)] + volume + ["-w", workdir, "/usr/bin/env", "-i"] + env + ["/bin/sh", "-c", " ".join(container_cmd)]
    shell(proot_cmd)
    shell(["rm", "-r", tmpdir])
parser_run.set_defaults(func=run)

if __name__ == "__main__":
    args = parser.parse_args()
    args.func(args)
